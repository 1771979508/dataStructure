二进制的存储：

 1.计算机中的二进制位都是以有符号数的补码形式储存的，按字节存储，8位代表一个字节；

 2.二进制中区分正负数采用的最高为时符号位来区分，正数的符号位是0，负数的符号位是1，剩下的就是这个数的绝对值，这个绝对值可以采用原码、补码、反码三种形式来表示绝对值的部分；

 3.原码最简单,也最好理解.原码就是绝对值的二进制数形式：例如+7的8位二进制原码是00000111,-7的8位二进制原码是10000111；
 
 4.但对于二进制运算而言,原码的运算不够方便,当两个数相加时,先要判断这两个数的符号是否相同,符号不同的话,还要判断哪一个数的绝对值更大.所以在计算机中,通常都是采用补码形式；
 
 5.正整数的补码与原码形式相同,例如+7的8位二进制补码是00000111；而负整数的补码则可以通过下列方式得到：将这个负整数的绝对值求反加1,连同符号位1一起表示就可以了.例如-7的8位二进制补码：将-7的绝对值7求反加1得1111001,连同符号位1一起就是11111001;
 
 6.你也可以练习一下+13和-13的8位二进制补码：+13d=00001101,-13d=11110011.


关于将一个负数转换为正数：
 
 对负数做一点操作即可将最高位的符号位1变成0，也就是 n & 0×7FFFFFFF 
 0×7FFFFFFF -> 这其实是一个整型


位运算：
	 除2 n/2 与 把整数n右移一位 n>>1 这俩的操作的效果是一样的
	  n>>1 ：
	   对给定的数N,将其二进制表示按位向右移动1位，高位补零，低位自动舍弃。比如12的二进制是1100(前面的0就不写了),按位移动动后编程0110即十进制的6。
	 n%2==0 与 (n&1)==1 效果一致
	  (n&1):
	   a的二进制码为：0111，
	   b的二进制码为：0011时：
	    0111
	     & 0011
	     = 0011
	    对应十进制形式为：7&3=3；
	 同理：因为1的对应存储的二进制码除了最低位，其他位都是0，
	 所以，n&1要么为1（n为奇数时，n的最低位为1），要么为0（n为偶数时，n的最低位为0）。
	    综上可得：n&1等效于 n%2==1